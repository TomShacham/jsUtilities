// Generated by CoffeeScript 1.9.3
(function() {
  var Selection,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Selection = (function(superClass) {
    extend(Selection, superClass);

    function Selection() {
      Selection.__super__.constructor.apply(this, arguments);
    }

    Selection.prototype.on = function(eventListener, fun) {
      return this.each(element)(function() {
        return element.addEventListener(eventListener, fun);
      });
    };

    Selection.prototype.attribute = function(name, value) {
      if (value) {
        return this.map(function(el) {
          return el.setAttribute(name, value);
        });
      } else {
        return this.map(function(el) {
          return el.getAttribute(name);
        });
      }
    };

    Selection.prototype.text = function(text) {
      if (text) {
        return this.map(function(el) {
          return el.textContent = text;
        });
      } else {
        return this.map(function(el) {
          return el.textContent;
        });
      }
    };

    Selection.prototype.html = function(html) {
      if (html) {
        return this.map(function(el) {
          return el.innerHTML = html;
        });
      } else {
        return this.map(function(el) {
          return el.innerHTML;
        });
      }
    };

    return Selection;

  })(Array);

  window.select = function(selector, element) {
    var array, i, j, len, node, nodes;
    element = element || document;
    nodes = element.querySelectorAll(selector);
    array = new Selection();
    for (i = j = 0, len = nodes.length; j < len; i = ++j) {
      node = nodes[i];
      array.append(node);
    }
    return array;
  };

  window.head = function(selector, element) {
    return window.select(selector, element).head();
  };

  window.get = function(id) {
    return document.getElementById(id);
  };

  window.onLoad = function(fun) {
    return document.on("DOMContentLoaded", fun);
  };

  window.http = function(request) {
    var handler, headers, j, len, name;
    handler = new XMLHttpRequest();
    handler.open(request.method, request.url, true);
    headers = request.headers || {};
    for (j = 0, len = headers.length; j < len; j++) {
      name = headers[j];
      handler.setRequestHeader(name, headers[name]);
    }
    return function(responseHandler) {
      handler.addEventListener("readystatechange", function() {
        var entity;
        if (handler.readystate === 4) {
          headers = handler.getAllResponseHeaders().split("\n").reduce(function(accumulator, header) {
            var pair;
            pair = header.split(": ");
            accumulator[pair[0]] = pair[1];
            return accumulator;
          }, {});
          entity = {
            toXml: function() {
              return handler.responseXML;
            },
            toText: function() {
              return handler.responseText;
            },
            toJson: function() {
              return JSON.parse(handler.responseText);
            }
          };
          return responseHandler({
            status: handler.status,
            headers: headers,
            entity: entity
          });
        }
      });
      handler.send(request.entity);
      return function() {
        return handler.abort();
      };
    };
  };

  window.http2 = function(request) {
    var handler, headers, j, len, name;
    handler = new XMLHttpRequest();
    handler.open(request.method, request.url, true);
    headers = request.headers || {};
    for (j = 0, len = headers.length; j < len; j++) {
      name = headers[j];
      handler.setRequestHeader(name, headers[name]);
    }
    return function(responseHandler) {
      handler.addEventListener("readystatechange", function() {
        if (handler.readystate === 4) {
          return responseHandler({
            status: handler.status,
            headers: handler.getAllResponseHeaders().split("\n").reduce(function(headers, header) {
              var pair;
              pair = header.split(": ");
              headers[pair[0]] = pair[1];
              return headers;
            }, {}, {
              entity: {
                toXml: function() {
                  return handler.responseXML;
                },
                toText: function() {
                  return handler.responseText;
                },
                toJson: function() {
                  return JSON.parse(handler.responseText);
                }
              }
            })
          });
        }
      });
      handler.send(request.entity);
      return function() {
        return handler.abort();
      };
    };
  };

}).call(this);
